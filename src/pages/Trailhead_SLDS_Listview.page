<apex:page showHeader="false" standardStylesheets="false" sidebar="false" applyHtmlTag="false" applyBodyTag="false" docType="html-5.0">
<html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" lang="en">
<head>
  <meta charset="utf-8" />
  <meta http-equiv="x-ua-compatible" content="ie=edge" />
  <title>Salesforce Lightning Design System Trailhead Module</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <!-- Import the Design System style sheet -->
  <apex:slds />
</head>
<apex:remoteObjects>
  <apex:remoteObjectModel name="Account" fields="Id,Name,LastModifiedDate"/>
</apex:remoteObjects>
<body>

  <!-- REQUIRED SLDS WRAPPER -->
  <div class="slds-scope">
    <!-- MASTHEAD -->
    <p class="slds-text-heading_label slds-m-bottom_small">
      Salesforce Lightning Design System Trailhead Module
    </p>
    <!-- / MASTHEAD -->
    <!-- PAGE HEADER -->
    <div class="slds-page-header" role="banner">
      <div class="slds-grid">
        <div class="slds-col slds-has-flexi-truncate">
          <!-- HEADING AREA -->
          <p class="slds-text-title_caps slds-line-height_reset">Accounts</p>
          <h1 class="slds-page-header__title slds-truncate" title="My Accounts">My Accounts</h1>
          <!-- / HEADING AREA -->
        </div>
        <div class="slds-col slds-no-flex slds-grid slds-align-top">
          <button class="slds-button slds-button_neutral">New Account</button>
        </div>
      </div>
      <div class="slds-grid">
        <div class="slds-col slds-align-bottom slds-p-top_small">
          <p class="slds-text-body_small">COUNT items</p>
        </div>
      </div>
    </div>
    <!-- / PAGE HEADER -->
    <!-- PRIMARY CONTENT WRAPPER -->
    <div class="myapp">
      <!-- CREATE NEW ACCOUNT -->
      <div aria-labelledby="newaccountform">
        <!-- CREATE NEW ACCOUNT FORM -->
        <form class="slds-form_stacked" id="add-account-form">
          <!-- BOXED AREA -->
          <fieldset class="slds-box slds-theme_default slds-container_small">
            <legend id="newaccountform" class="slds-text-heading_medium slds-p-vertical_medium">Add a new account</legend>
            <div class="slds-form-element">
              <label class="slds-form-element__label" for="account-name">Name</label>
              <div class="slds-form-element__control">
                <input id="account-name" class="slds-input" type="text" placeholder="New account"/>
              </div>
            </div>
            <button class="slds-button slds-button_brand slds-m-top_medium" type="submit">Create Account</button>
          </fieldset>
          <!-- / BOXED AREA -->
        </form>
        <!-- CREATE NEW ACCOUNT FORM -->
      </div>
      <!-- / CREATE NEW ACCOUNT -->
      <!-- ACCOUNT LIST TABLE -->
      <div id="account-list" class="slds-p-vertical_medium"></div>
      <!-- / ACCOUNT LIST TABLE -->
    </div>
    <!-- / PRIMARY CONTENT WRAPPER -->
    <!-- FOOTER -->
    <footer role="contentinfo" class="slds-p-around_large">
      <!-- LAYOUT GRID -->
      <div class="slds-grid slds-grid_align-spread">
        <p class="slds-col">Salesforce Lightning Design System Example</p>
        <p class="slds-col">&copy; David Perez</p>
      </div>
      <!-- / LAYOUT GRID -->
    </footer>
    <!-- / FOOTER -->
  </div>
  <!-- / REQUIRED SLDS WRAPPER -->
  <!-- JAVASCRIPT -->
  <script>
    (function() {
      var account = new SObjectModel.Account();
      var outputDiv = document.getElementById('account-list');
      var updateOutputDiv = function() {
        account.retrieve(
          { orderby: [{ LastModifiedDate: 'DESC' }], limit: 10 },
          function(error, records) {
            if (error) {
              alert(error.message);
            } else {
              // create data table
              var dataTable = document.createElement('table');
              dataTable.className = 'slds-table slds-table_bordered slds-table_cell-buffer slds-no-row-hover';
              // add header row
              var tableHeader = dataTable.createTHead();
              var tableHeaderRow = tableHeader.insertRow();
              var tableHeaderRowCell1 = tableHeaderRow.insertCell(0);
              tableHeaderRowCell1.appendChild(document.createTextNode('Account name'));
              tableHeaderRowCell1.setAttribute('scope', 'col');
              tableHeaderRowCell1.setAttribute('class', 'slds-text-heading_label');
              var tableHeaderRowCell2 = tableHeaderRow.insertCell(1);
              tableHeaderRowCell2.appendChild(document.createTextNode('Account ID'));
              tableHeaderRowCell2.setAttribute('scope', 'col');
              tableHeaderRowCell2.setAttribute('class', 'slds-text-heading_label');
              // build table body
              var tableBody = dataTable.appendChild(document.createElement('tbody'))
              var dataRow, dataRowCell1, dataRowCell2, recordName, recordId;
              records.forEach(function(record) {
                dataRow = tableBody.insertRow();
                dataRowCell1 = dataRow.insertCell(0);
                recordName = document.createTextNode(record.get('Name'));
                dataRowCell1.appendChild(recordName);
                dataRowCell2 = dataRow.insertCell(1);
                recordId = document.createTextNode(record.get('Id'));
                dataRowCell2.appendChild(recordId);
              });
              if (outputDiv.firstChild) {
                // replace table if it already exists
                // see later in tutorial
                outputDiv.replaceChild(dataTable, outputDiv.firstChild);
              } else {
                outputDiv.appendChild(dataTable);
              }
            }
          }
        );
      }
      updateOutputDiv();
      var accountForm = document.getElementById('add-account-form');
      var accountNameField = document.getElementById('account-name');
      var createAccount = function() {
        var account = new SObjectModel.Account();
        account.create({ Name: accountNameField.value }, function(error, records) {
          if (error) {
            alert(error.message);
          } else {
            updateOutputDiv();
            accountNameField.value = '';
          }
        });
      }
      accountForm.addEventListener('submit', function(e) {
        e.preventDefault();
        createAccount();
      });
    })();
  </script>
  <!-- / JAVASCRIPT -->
</body>
</html>
</apex:page>