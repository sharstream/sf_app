<?xml version="1.0"?>
<project name="trailblazer"
         default="test"
         basedir="."
         xmlns:sf="antlib:com.salesforce">

    <property file="build.properties"/>
    <property environment="env"/>

    <!-- Setting default value for username, password and session id properties to empty string 
         so unset values are treated as empty. Without this, ant expressions such as ${sf.username}
         will be treated literally.
    -->
    <condition property="sf.username"
               value=""> <not> <isset property="sf.username"/> </not> </condition>
    <condition property="sf.password"
               value=""> <not> <isset property="sf.password"/> </not> </condition>
    <condition property="sf.sessionId"
               value=""> <not> <isset property="sf.sessionId"/> </not> </condition>

    <taskdef resource="com/salesforce/antlib.xml"
             uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="/Users/davidperez/Documents/applications/trailblazer/lib/ant-salesforce.jar" />          
        </classpath>
    </taskdef>
  
    <!-- Test out deploy and retrieve verbs for package 'mypkg' -->
    <target 
      name="retrieveMetadata">
    <!-- Upload the contents of the "mypkg" package -->
    <mkdir 
      dir="customMetadata"/>
    <sf:retrieve 
      username="${sf.username}"
      password="${sf.password}"
      sessionId="${sf.sessionId}"
      serverurl="${sf.serverurl}"
      pollWaitMillis="40000"
      maxPoll="${sf.maxPoll}"
      retrieveTarget="customMetadata"
      unpackaged="mypkg/objectMetadata.xml"/>    
    <!-- Retrieve the contents into another directory -->
    <mkdir 
      dir="codeMetadata"/>
    <sf:retrieve 
      username="${sf.username}"
      password="${sf.password}"
      sessionId="${sf.sessionId}"
      serverurl="${sf.serverurl}"
      maxPoll="${sf.maxPoll}"
      retrieveTarget="codeMetadata"
      unpackaged="mypkg/codeMetadata.xml"/>
    </target>

    <target 
      name="deployDryRunMetadata">
    <sf:deploy 
      username="${sf.clmdryrun.username}"
      password="${sf.clmdryrun.password}"
      serverurl="${sf.serverurl}"
      maxPoll="${sf.maxPoll}"
      deployRoot="customMetadata"
      autoUpdatePackage="true"
      testLevel="RunLocalTests"
      checkOnly="false"
      rollbackOnError="true"
      pollWaitMillis="40000"/>
    </target>

    <target 
      name="deployDryRunCode">
    <sf:deploy 
      username="${sf.clmdryrun.username}"
      password="${sf.clmdryrun.password}"
      serverurl="${sf.serverurl}"
      maxPoll="${sf.maxPoll}"
      deployRoot="customCode"
      autoUpdatePackage="true"
      testLevel="RunLocalTests"
      checkOnly="false"
      rollbackOnError="true"
      pollWaitMillis="40000"/>
    </target>
    <!--deployment CLM Production-->
    <target 
      name="deployProd">
    <sf:deploy 
      username="${sf.prod.username}"
      password="${sf.prod.password}" 
      serverurl="${sf.prod.serverurl}" 
      deployRoot="deployProd" 
      autoUpdatePackage="true"
      testLevel="RunLocalTests"
      checkOnly="true"
      rollbackOnError="true"/>
    </target>
    <!--Dev sandbox empty validation-->
    <target 
      name="EmptyValidationDev">
    <sf:deploy 
      username="${sf.username}"
      password="${sf.password}" 
      serverurl="${sf.serverurl}" 
      deployRoot="EmptyValidation" 
      autoUpdatePackage="true"
      testLevel="RunLocalTests"
      checkOnly="true"
      rollbackOnError="true"/>
    </target>
    <!--Production Org empty validation-->
    <target 
      name="EmptyValidationPro">
    <sf:deploy 
      username="${sf.prod.username}"
      password="${sf.prod.password}" 
      serverurl="${sf.prod.serverurl}" 
      deployRoot="Deployroot" 
      autoUpdatePackage="true"
      testLevel="RunLocalTests"
      checkOnly="true"
      rollbackOnError="true"/>
    </target>

    <!-- Deploy a zip of metadata files to the org -->
    <target 
      name="Deployroot">
    <sf:deploy 
      username="${sf.username}"
      password="${sf.password}"
      serverurl="${sf.serverurl}"
      zipFile="${sf.zipFile}"
      autoUpdatePackage="true"
      checkOnly="false"
      rollbackOnError="true"/>
    </target>

    <!-- Zip TrailBlazer sandbox -->
    <target name="Deplotrailblazer">
    <sf:deploy 
      username="${sf.trailblazer.username}"
      password="${sf.trailblazer.password}"
      serverurl="${sf.prod.serverurl}"
      zipFile="${sf.zipFile}"
      autoUpdatePackage="true"
      checkOnly="false"
      rollbackOnError="true"/>
    </target>

    <target 
      name="retrieveChangeSet">    
    <sf:retrieve 
      username="${sf.prelim.username}"
      password="${sf.prelim.password}"
      serverurl="${sf.serverurl}"
      retrieveTarget="src"
      packageNames="Deal Approval Process Field Update clmdryrun"/>
    </target> 

    <!-- Retrieve an unpackaged set of metadata from your org -->
    <!-- The file unpackaged/package.xml lists what is to be retrieved -->
    <target 
      name="retrieveUnpackaged">
    <mkdir 
      dir="retrieveUnpackaged"/>
    <!-- Retrieve the contents into another directory -->
    <sf:retrieve 
      username="${sf.username}"
      password="${sf.password}"
      sessionId="${sf.sessionId}"
      serverurl="${sf.serverurl}"
      maxPoll="${sf.maxPoll}"
      retrieveTarget="retrieveUnpackaged"
      unpackaged="unpackaged/package.xml"/>
    </target>

    <!-- Retrieve all the items of a particular metadata type -->
    <target 
      name="bulkRetrieve">
    <sf:bulkRetrieve 
      username="${sf.username}"
      password="${sf.password}"
      sessionId="${sf.sessionId}"
      serverurl="${sf.serverurl}"
      maxPoll="${sf.maxPoll}"
      metadataType="${sf.metadataType}"
      retrieveTarget="retrieveUnpackaged"/>
    </target>

    <!-- Retrieve metadata for all the packages specified under packageNames -->
    <target 
      name="retrievePkg">
    <mkdir 
      dir="retrieveOutput"/>
    <sf:retrieve 
      username="${sf.username}"
      password="${sf.password}"
      sessionId="${sf.sessionId}"
      serverurl="${sf.serverurl}"
      maxPoll="${sf.maxPoll}"
      retrieveTarget="retrieveOutput"
      packageNames="${sf.pkgName}"/>
    </target>

    <!-- Deploy the unpackaged set of metadata retrieved with retrieveUnpackaged and run tests in this organization's namespace only-->
    <target 
      name="deployUnpackaged">
    <sf:deploy 
      username="${sf.username}"
      password="${sf.password}"
      sessionId="${sf.sessionId}"
      serverurl="${sf.serverurl}"
      maxPoll="${sf.maxPoll}"
      deployRoot="retrieveUnpackaged"
      rollbackOnError="true"/>
    </target>

    <!-- Shows deploying code & running tests for code in directory -->
    <target name="deployCode">
    <!-- Upload the contents of the "codepkg" directory, running the tests for just 1 class -->
    <sf:deploy username="${sf.username}"
      password="${sf.password}"
      sessionId="${sf.sessionId}"
      serverurl="${sf.serverurl}"
      maxPoll="${sf.maxPoll}"
      deployRoot="codeMetadata"
      testLevel="RunSpecifiedTests"
      rollbackOnError="true"
      pollWaitMillis="40000">
    <runTest>V1TestUtility_Test</runTest> 
    <runTest>Opp_ManualClone_ContactRolePartner_Tst</runTest> 
    <runTest>ReleaseSearchControllerTest</runTest>
    <runTest>SupportOrder_AutoCloneBatch_Test</runTest> 
    <runTest>SupportOrder_ManualCloneController_Test</runTest> 
    <runTest>SO_AutoCopy_Controller_tst</runTest>
    </sf:deploy>
    </target>
  
    <!-- Shows deploying code with no TestLevel sepcified -->
    <target 
      name="deployCodeNoTestLevelSpecified">
    <sf:deploy 
      username="${sf.username}"
      password="${sf.password}"
      sessionId="${sf.sessionId}"
      serverurl="${sf.serverurl}"
      maxPoll="${sf.maxPoll}"
      deployRoot="codepkg"
      rollbackOnError="true"/>
    </target>
  
    <!-- Shows deploying code and running tests only within the org namespace -->
    <target 
      name="deployCodeRunLocalTests">
    <sf:deploy 
      username="${sf.username}"
      password="${sf.password}"
      sessionId="${sf.sessionId}"
      serverurl="${sf.serverurl}"
      maxPoll="${sf.maxPoll}"
      deployRoot="codepkg"
      rollbackOnError="true"
      testlevel="RunLocalTests"/>
    </target>
  
    <!-- Shows removing code; only succeeds if done after deployCode -->
    <target 
      name="undeployCode">
    <sf:deploy 
      username="${sf.username}"
      password="${sf.password}"
      sessionId="${sf.sessionId}"
      serverurl="${sf.serverurl}"
      maxPoll="${sf.maxPoll}"
      deployRoot="removecodepkg"/>
    </target>

    <!-- Shows retrieving code; only succeeds if done after deployCode -->
    <target name="retrieveCode">
    <!-- Retrieve the contents listed in the file codepkg/package.xml into the codepkg directory -->
    <sf:retrieve 
      username="${sf.username}"
      password="${sf.password}"
      sessionId="${sf.sessionId}"
      serverurl="${sf.serverurl}"
      maxPoll="${sf.maxPoll}"
      retrieveTarget="codepkg"
      unpackaged="codepkg/package.xml"/>
    </target>

    <!-- Shows deploying code, running all tests, and running tests (1 of which fails), and logging. -->
    <target 
      name="deployCodeFailingTest">
    <!-- Upload the contents of the "codepkg" package, running all tests -->
    <sf:deploy 
      username="${sf.username}"
      password="${sf.password}"
      sessionId="${sf.sessionId}"
      serverurl="${sf.serverurl}"
      maxPoll="${sf.maxPoll}"
      deployRoot="codepkg"
      testLevel="RunAllTestsInOrg"
      rollbackOnError="true"
      logType="Debugonly"/>
    </target>

    <!-- Shows check only; never actually saves to the server -->
    <target name="deployCodeCheckOnly">
    <sf:deploy 
      username="${sf.username}"
      password="${sf.password}"
      sessionId="${sf.sessionId}"
      serverurl="${sf.serverurl}"
      maxPoll="${sf.maxPoll}"
      deployRoot="codepkg"
      checkOnly="true"/>
    </target>
  
    <!-- Shows quick deployment of recent validation. Set the property sf.recentValidationId to your recent check only deployment Id -->
    <target name="quickDeploy">
    <sf:deployRecentValidation  
      username="${sf.username}"
      password="${sf.password}"
      sessionId="${sf.sessionId}"
      serverurl="${sf.serverurl}"
      maxPoll="${sf.maxPoll}"
      recentValidationId="${sf.recentValidationId}"/>
    </target>
  
    <!-- Shows cancel deployment of deploy request either pending or in progress. Set property sf.requestId to Id of pending or in progress deploy request -->
    <target name="cancelDeploy">
    <sf:cancelDeploy  
      username="${sf.username}"
      password="${sf.password}"
      serverurl="${sf.serverurl}"
      maxPoll="${sf.maxPoll}"
      requestId="${sf.requestId}"/>
    </target>

    <!-- Retrieve the information of all items of a particular metadata type -->
    <target name="listMetadata">
    <sf:listMetadata 
      username="${sf.username}"
      password="${sf.password}"
      sessionId="${sf.sessionId}"
      serverurl="${sf.serverurl}"
      metadataType="${sf.metadataType}"/>
    </target>

    <!-- Retrieve the information on all supported metadata type -->
    <target name="describeMetadata">
    <sf:describeMetadata 
      username="${sf.username}"
      password="${sf.password}"
      sessionId="${sf.sessionId}"
      serverurl="${sf.serverurl}"/>
    </target>
</project>